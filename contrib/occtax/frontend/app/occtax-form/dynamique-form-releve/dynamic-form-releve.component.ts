import {
  Component,
  Input,
  Output,
  EventEmitter
} from "@angular/core";
import {
  FormBuilder,
  FormGroup,
} from "@angular/forms";

@Component({
  selector: "pnx-dynamic-form-releve",
  template: `<br>
  <pnx-dynamic-form-generator 
    [autoGenerated]='true'
    [myFormGroup]="formArray"
    [formsDefinition]="formConfigReleveDataSet"
    >
  </pnx-dynamic-form-generator>
  `,
  styles: [':host { width: 100%; }']
})
export class dynamicFormReleveComponent {
  @Input() formArray: FormGroup;
  @Input() formConfigReleveDataSet: any;
  @Output() output = new EventEmitter();
  public dynamicFormGroup: FormGroup;
  public formValue: any;

  constructor(
    private fb: FormBuilder,
  ) {}

  ngOnInit() {
    if(!this.formArray){
      this.dynamicFormGroup = this.fb.group({});
      this.formArray = this.dynamicFormGroup;
    }
    this.formValue = this.formArray.value;
    const objFormChangeSubscription = this.formArray.valueChanges.subscribe(
      () => {
        if (this.isFormReady()) {
          objFormChangeSubscription.unsubscribe();
          //Si la valeur des champs du formulaire dynamique n'est pas renseignée, alors on la passe à null
          for (const key of Object.keys(this.formArray.value)){
            if (this.formValue[key] === undefined){
              this.formValue[key] =  this.formArray.value[key];
            }
          }
          this.formArray.setValue(this.formValue);
        }
      }
    );
    // emit change programmatically
    //this.formArray.updateValueAndValidity({ onlySelf: false, emitEvent: true });
  }

  isFormReady() {
    let schemaFormSize = this.formConfigReleveDataSet.filter(
      (elem) => elem.type_widget
    ).length;
    
    const formSize = Object.keys(this.formArray.controls).length;
    return schemaFormSize === formSize;
  }

}
